// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Test2.scala

package examples;

import org.apache.spark.SparkConf;
import org.apache.spark.SparkContext;
import org.apache.spark.rdd.*;
import scala.*;
import scala.collection.immutable.Range;
import scala.math.Ordering;
import scala.reflect.ClassTag$;
import scala.runtime.*;

public final class Test2$
{

    public String f(String s)
    {
        return s;
    }

    public void main(String args[])
    {
        SparkConf conf = (new SparkConf()).setAppName("Scala Toy Example 1: Add Integers").setMaster("local[4]");
        SparkContext sc = new SparkContext(conf);
        RDD$.MODULE$.rddToPairRDDFunctions(sc.textFile("logfile", sc.textFile$default$2()).map(new Serializable() {

            public final Tuple2 apply(String s)
            {
                String a[] = s.split(",");
                FloatRef tmp = FloatRef.create(Float.parseFloat(a[1]));
                int itr = Integer.parseInt(a[2]);
                FloatRef rate = FloatRef.create(Float.parseFloat(a[3]));
                RichInt$.MODULE$.to$extension0(Predef$.MODULE$.intWrapper(1), itr).foreach$mVc$sp(new Serializable(tmp, rate) {

                    public final void apply(int i)
                    {
                        apply$mcVI$sp(i);
                    }

                    public void apply$mcVI$sp(int i)
                    {
                        tmp$1.elem = tmp$1.elem * ((float)1 + rate$1.elem);
                    }

                    public final volatile Object apply(Object v1)
                    {
                        apply(BoxesRunTime.unboxToInt(v1));
                        return BoxedUnit.UNIT;
                    }

                    public static final long serialVersionUID = 0L;
                    private final FloatRef tmp$1;
                    private final FloatRef rate$1;

                    public 
                    {
                        this.tmp$1 = tmp$1;
                        this.rate$1 = rate$1;
                        super();
                    }
                });
                return new Tuple2(a[0], BoxesRunTime.boxToFloat(tmp.elem));
            }

            public final volatile Object apply(Object v1)
            {
                return apply((String)v1);
            }

            public static final long serialVersionUID = 0L;

        }, ClassTag$.MODULE$.apply(scala/Tuple2)).filter(new Serializable() {

            public final boolean apply(Tuple2 l)
            {
                return BoxesRunTime.unboxToFloat(l._2()) > (float)0x3b9aca00;
            }

            public final volatile Object apply(Object v1)
            {
                return BoxesRunTime.boxToBoolean(apply((Tuple2)v1));
            }

            public static final long serialVersionUID = 0L;

        }).map(new Serializable() {

            public final Tuple2 apply(Tuple2 t)
            {
                return new Tuple2(t._1(), BoxesRunTime.boxToInteger(1));
            }

            public final volatile Object apply(Object v1)
            {
                return apply((Tuple2)v1);
            }

            public static final long serialVersionUID = 0L;

        }, ClassTag$.MODULE$.apply(scala/Tuple2)), ClassTag$.MODULE$.apply(java/lang/String), ClassTag$.MODULE$.Int(), scala.math.Ordering.String..MODULE$).reduceByKey(new Serializable() {

            public final int apply(int x$1, int x$2)
            {
                return apply$mcIII$sp(x$1, x$2);
            }

            public int apply$mcIII$sp(int x$1, int x$2)
            {
                return x$1 + x$2;
            }

            public final volatile Object apply(Object v1, Object v2)
            {
                return BoxesRunTime.boxToInteger(apply(BoxesRunTime.unboxToInt(v1), BoxesRunTime.unboxToInt(v2)));
            }

            public static final long serialVersionUID = 0L;

        });
    }

    private Test2$()
    {
    }

    public static final Test2$ MODULE$ = this;

    static 
    {
        new Test2$();
    }
}
