// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Test2.scala

package examples;

import org.apache.spark.SparkConf;
import org.apache.spark.SparkContext;
import org.apache.spark.rdd.RDD;
import scala.*;
import scala.collection.immutable.Range;
import scala.reflect.ClassTag$;
import scala.runtime.*;

public final class Test2$
{

    public String f(String s)
    {
        return s;
    }

    public void main(String args[])
    {
        SparkConf conf = (new SparkConf()).setAppName("Scala Toy Example 1: Add Integers").setMaster("local[4]");
        SparkContext sc = new SparkContext(conf);
        sc.textFile("logfile", sc.textFile$default$2()).map(new Serializable() {

            public final Tuple4 apply(String l)
            {
                String a[] = l.split(",");
                return new Tuple4(a[0], BoxesRunTime.boxToFloat(Float.parseFloat(a[1])), BoxesRunTime.boxToInteger(Integer.parseInt(a[2])), BoxesRunTime.boxToFloat(Float.parseFloat(a[3])));
            }

            public final volatile Object apply(Object v1)
            {
                return apply((String)v1);
            }

            public static final long serialVersionUID = 0L;

        }, ClassTag$.MODULE$.apply(scala/Tuple4)).map(new Serializable() {

            public final Tuple4 apply(Tuple4 s)
            {
                FloatRef a = FloatRef.create(BoxesRunTime.unboxToFloat(s._2()));
                RichInt$.MODULE$.to$extension0(Predef$.MODULE$.intWrapper(1), BoxesRunTime.unboxToInt(s._3())).foreach$mVc$sp(new Serializable(a, s) {

                    public final void apply(int i)
                    {
                        apply$mcVI$sp(i);
                    }

                    public void apply$mcVI$sp(int i)
                    {
                        a$1.elem = a$1.elem * ((float)1 + BoxesRunTime.unboxToFloat(s$1._4()));
                    }

                    public final volatile Object apply(Object v1)
                    {
                        apply(BoxesRunTime.unboxToInt(v1));
                        return BoxedUnit.UNIT;
                    }

                    public static final long serialVersionUID = 0L;
                    private final FloatRef a$1;
                    private final Tuple4 s$1;

                    public 
                    {
                        this.a$1 = a$1;
                        this.s$1 = s$1;
                        super();
                    }
                });
                return new Tuple4(s._1(), BoxesRunTime.boxToFloat(a.elem), s._3(), s._4());
            }

            public final volatile Object apply(Object v1)
            {
                return apply((Tuple4)v1);
            }

            public static final long serialVersionUID = 0L;

        }, ClassTag$.MODULE$.apply(scala/Tuple4)).filter(new Serializable() {

            public final boolean apply(Tuple4 t)
            {
                return BoxesRunTime.unboxToInt(t._3()) > 30;
            }

            public final volatile Object apply(Object v1)
            {
                return BoxesRunTime.boxToBoolean(apply((Tuple4)v1));
            }

            public static final long serialVersionUID = 0L;

        }).map(new Serializable() {

            public final Tuple3 apply(Tuple4 p)
            {
                return BoxesRunTime.unboxToFloat(p._2()) >= (float)0x3b9aca00 ? new Tuple3(p._1(), p._2(), "billionaire") : new Tuple3(p._1(), p._2(), "poor");
            }

            public final volatile Object apply(Object v1)
            {
                return apply((Tuple4)v1);
            }

            public static final long serialVersionUID = 0L;

        }, ClassTag$.MODULE$.apply(scala/Tuple3));
    }

    private Test2$()
    {
    }

    public static final Test2$ MODULE$ = this;

    static 
    {
        new Test2$();
    }
}
